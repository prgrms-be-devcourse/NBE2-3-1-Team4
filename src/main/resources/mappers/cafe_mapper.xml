<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.cafe.add_item.mapper.AddItemMapper">

    <select id="itemAll" resultType="ItemTO">
        select item_id, name, itemQuantity, price
        from item
    </select>

    <insert id="ordersAdd" parameterType="OrdersTO" useGeneratedKeys="true" keyProperty="order_id">
        insert into orders (email, address, zip_code, password)
        values (#{email}, #{address}, #{zip_code}, PASSWORD(#{password}));
    </insert>

    <insert id="orderItemAdd" parameterType="OrderItemTO" >
        insert into orderItem (order_id, item_id, orderCount, orderPrice)
        VALUES (#{order_id}, #{item_id}, #{orderCount}, #{orderPrice});
    </insert>

    <select id="list" resultType="ItemTO">
        select item_id, name, itemQuantity, price
        from item
        order by item_id desc
    </select>

    <select id="listPage" parameterType="map" resultType="ItemTO">
        select item_id, name, itemQuantity, price
        from item
        order by item_id desc
            limit #{limit} offset #{offset}
    </select>


    <select id="totalCount" resultType="int">
        select count(*)
        from item
    </select>

<!--    delete-->
    <select id="findOrdersByEmailAndPassword" parameterType="String" resultType="OrdersTO">
        select order_id, email, address, order_date, orderStatus, zip_code
        from orders
        where email=#{email} and password=password(#{password})
    </select>

    <select id="findOrdersCountByEmail" parameterType="String" resultType="int">
        select count(order_id)
        from orders
        where email=#{email}
    </select>

    <select id="findDeleteOrders" parameterType="String" resultType="OrdersTO">
        select order_id, order_date, orderStatus
        from orders
        where order_id=#{order_id}
    </select>

    <resultMap id="OrderResultMap" type="com.example.cafe.dto.OrdersTO">
        <id property="order_id" column="order_id"/>
        <result property="order_date" column="order_date"/>
        <result property="email" column="email"/>
        <result property="orderStatus" column="orderStatus"/>
        <result property="zip_code" column="zip_code"/>
        <result property="address" column="address"/>

        <!-- OrderItem 리스트 매핑 -->
        <collection property="orderItems" ofType="com.example.cafe.dto.OrderItemTO">
            <id property="order_item_id" column="order_item_id"/>
            <result property="item_id" column="item_id"/>
            <result property="orderCount" column="orderCount"/>
            <result property="orderPrice" column="orderPrice"/>
        </collection>

        <!-- Item 리스트 매핑 -->
        <collection property="items" ofType="com.example.cafe.dto.ItemTO">
            <id property="item_id" column="item_id"/>
            <result property="name" column="name"/>
        </collection>
    </resultMap>

    <select id="findOrdersWithItems" resultMap="OrderResultMap">
        SELECT
            o.order_id,
            o.order_date,
            o.orderStatus,
            o.zip_code,
            o.address,
            oi.order_item_id,
            oi.item_id,
            oi.orderCount,
            oi.orderPrice,
            i.name
        FROM
            orders o
                JOIN
            orderItem oi ON o.order_id = oi.order_id
                JOIN
            item i ON oi.item_id = i.item_id
        WHERE
            o.email=#{email}
    </select>

    <select id="findAboutOrder" resultMap="OrderResultMap">
        SELECT
            o.order_id,
            o.email,
            o.zip_code,
            o.address,
            oi.order_item_id,
            oi.item_id,
            oi.orderCount,
            oi.orderPrice,
            i.name
        FROM
            orders o
                JOIN
            orderItem oi ON o.order_id = oi.order_id
                JOIN
            item i ON oi.item_id = i.item_id
        WHERE
            o.order_id=#{orderId}
    </select>

    <delete id="deleteOkOrders" parameterType="OrdersTO">
        delete from orders
        where order_id=#{order_id}
    </delete>

    <!--update-->

    <!-- 주문 ID로 주문 내역 조회 -->
    <select id="findOrderItemByOrderId" resultType="OrderItemTO">
        SELECT
            oi.order_item_id,
            oi.order_id,
            i.item_id,
            i.name AS item_name,
            oi.orderCount,
            oi.orderPrice
        FROM orders o
                 JOIN orderItem oi ON o.order_id = oi.order_id
                 JOIN item i ON oi.item_id = i.item_id
        WHERE o.order_id = #{order_id} -- and oi.item_id=#{item_id}
    </select>

    <!--상품 목록 조회 -->
    <select id="findAllItems" resultType="ItemTO">
        SELECT item_id, name, price
        FROM item;
    </select>

    <!-- 주문 정보 업데이트 -->
    <update id="updateOrders" parameterType="OrdersTO">
        UPDATE orders
        SET address = #{address}, zip_code = #{zip_code}
        WHERE order_id = #{order_id}
    </update>

    <update id="updateOrderCount" parameterType="map">
        UPDATE orderItem oi
            JOIN item i ON oi.item_id = i.item_id
            SET oi.orderCount = #{orderCount}
        WHERE oi.order_id = #{order_id} AND i.item_id = #{item_id};
    </update>
</mapper>
